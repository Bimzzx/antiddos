#!/bin/bash
# Script that written to protect Linux Servers/PCs and routers

# You can use some tweaks on upstream linux router
# But, in this case, you need to replace INPUT -> FORWARD
# It will be give better protection

# I recommend you to backup all data of your server
# before using this script

# And reset your sysctl file to default

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ToDo:

# Auto-backup of iptables rules before execution
# Create dir in the home folder for backups
# Normal sort of rules
# Smart checks for some things
# Err handler & possible autofixer
# Block methods of stressers like TCP-REF, UDP-NULL
# Block IPs Of free stressers using ipset+iptables
# Return UFW and add rules for him
# Improve backup of sysctl
# Make separate file with tweaks + make symbolic link
# [maybe] make separate file with rules too
# Clearer code
# Logs of script for debug
# Make changelogs
# Block methods of public DDoS scripts
# Limit new connections per second
# Re-add rule that blocks INVALID packets (it has caused problems before)
# Better IPv6 Protection
# Ratelimit for some L3 Protocols
# Better ICMP protection
# Protection for other protocols (L4)
# Rewrite the script to Python (maybe)

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Backup sysctl file
# if it exists it will be overwritten
cp /etc/sysctl.conf /etc/sysctl.bckp

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Reset iptables to default
iptables -F; # Remove all rules
iptables -X; # Delete user-defined chains
iptables -Z; # Reset counters in all chains

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Variables

# Color
LightBlue='\033[1;34m'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Show warning if script is not started as root

if [ "$(whoami)" != "root" ]; then
        echo -e "${LightBlue}[!] Run this script as root"
        exit 255
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

clear;

echo -e "${LightBlue}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "           AntiDDoS Script by yuki           "
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

while true; do
    echo -e "${LightBlue}\r"
    read -p "[+] Use SynCookies? He protect you against SYN DoS, but may cause overload under attack (on slow servers), recommended: y >> " yn
    case $yn in
        [Yy]* ) echo "net.ipv4.tcp_syncookies = 1" >> /etc/sysctl.conf; break;;
        [Nn]* ) echo Okay, skipped.; break;;
        * ) echo "Enter correct answer, pls.";;
    esac
done
read -p "[+] Enable reverse-path filter? He help you against spoofing, but cause problems with asymmetric routing, recommended: y >> " yn
    case $yn in
        [Yy]* ) echo "net.ipv4.conf.all.rp_filter = 1" >> /etc/sysctl.conf;;
        [Nn]* ) echo Okay, skipped.;;
        * ) echo "Enter correct answer, pls.";;
    esac

read -p "[+] Enable TCP TW Recycle and TCP ECN? Recycle may cause problems with load-balancers, and ECN need to be supported by routers. Recommended: n >> "
    case $yn in
        [Yy]* ) echo "net.ipv4.tcp_ecn = 1" >> /etc/sysctl.conf; echo "net.ipv4.tcp_tw_recycle = 1" >> /etc/sysctl.conf;;
        [Nn]* ) echo Okay, skipped.;;
        * ) echo "Enter correct answer, pls.";;
    esac
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

iptables -N UDP-DoS -t raw;           # UDP DoS Block
iptables -N SYN-DoS -t raw;           # SYN DoS Block
iptables -N Conn-limit -t raw;        # Conn Limit
iptables -N TCP-Bogus-Flags -t raw;   # TCP Bogus Flags
iptables -N Port-Block -t raw;        # Block Some ports
iptables -N Fragmented -t raw;        # Block Fragmented packets
iptables -N Spoof -t raw;             # Block Spoofs
iptables -N Broadcast -t raw;         # Block Packets from broadcast
iptables -N ICMP -t raw;              # ICMP Protection

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

iptables -t raw -A UDP-DoS -j DROP;
iptables -t raw -A SYN-DoS -j DROP;
iptables -t raw -A Conn-limit -j DROP;
iptables -t raw -A TCP-Bogus-Flags -j DROP;
iptables -t raw -A Port-Block -j DROP;
iptables -t raw -A Fragmented -j DROP;
iptables -t raw -A Spoof -j DROP;
iptables -t raw -A Broadcast -j DROP;
iptables -t raw -A ICMP -j DROP;

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#        Permissive rules
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Allow SSH
iptables -t raw -A PREROUTING -p tcp --dport ssh -m limit --limit 3/s --limit-burst 5 -j ACCEPT

# Allow lo without any limits
iptables -A INPUT -i lo -j ACCEPT;
iptables -A OUTPUT -o lo -j ACCEPT;

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#          Protection
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Protection against UDP-DoS and TCP-DoS
iptables -A UDP-DoS -p udp --match hashlimit --hashlimit-upto 400/second --hashlimit-mode srcip --hashlimit-name udpflood;
iptables -A SYN-DoS -p tcp --syn --match hashlimit --hashlimit-upto 200/second --hashlimit-mode srcip --hashlimit-name synflood;

# Main ICMP Protection
iptables -t raw -A PREROUTING -p icmp --icmp-type address-mask-request -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type router-solicitation -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type timestamp-request -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type 8 -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type 8 -m limit --limit 1/s -j ACCEPT;
iptables -t raw -A PREROUTING -p icmp -m limit --limit 2/s --limit-burst 3 -j ACCEPT;

# Protection against UDP DoS on random ports
# When your server flooding "ICMP: port unreachable"
iptables -A OUTPUT -p icmp --icmp-type port-unreach -j DROP;
iptables -A OUTPUT -p icmp --icmp-type port-unreach -m limit --limit 30/m -j ACCEPT;

# Rules against some bad TCP Packets that may be used in attacks
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags FIN,RST FIN,RST -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags SYN,RST SYN,RST -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags FIN,ACK FIN -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags ACK,URG URG -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags ACK,FIN FIN -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags ACK,PSH PSH -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags SYN,ECN,CWR -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags ALL NONE -j DROP;
iptables -t raw -A TCP-Bogus-Flags -p tcp --tcp-flags ALL ALL -j DROP;

# Get additional protection by blocking some ports
iptables -t raw -A Port-Block -p UDP -m multiport --dports 7,19,25,135,136,137,138,139,445,1900,3389 -j DROP;
iptables -t raw -A Port-Block -p TCP -m multiport --dports 7,19,25,135,136,137,138,139,445,1900,3389 -j DROP;

# Block AMP methods (spoofed attacks)
iptables -t raw -A PREROUTING -p udp -m multiport --sports 123,53,5432,17185,7001,1900,9000 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 123 -m limit --limit 2/s --limit-burst 2 -j ACCEPT;
iptables -t raw -A PREROUTING -p udp --sport 53 -m limit --limit 4/s --limit-burst 10 -j ACCEPT;
iptables -t raw -A PREROUTING -p udp --sport 5432 -m limit --limit 3/s --limit-burst 7 -j ACCEPT;

# Limit connections per one IP
iptables -t raw -A Conn-limit -p tcp -m connlimit --connlimit-above 80 -j DROP;

# Protection against TCP RST Floods
iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP;
iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT;

# Limit new connections per IP to SSH
iptables -I INPUT -p tcp --dport ssh -m state --state NEW -m recent --set;
iptables -I INPUT -p tcp --dport ssh -m state --state NEW -m recent --update --seconds 10 --hitcount 50 -j DROP;

# Drop all fragmented packets (against Fraggle Attacks)
iptables -t raw -A Fragmented -f -j DROP;

# Block NEW packets that != SYN
iptables -t raw -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP;

# UDP Spoofing load reduction
ipset create antiddos_yuki hash:ip hashsize 16777216 maxelem 40000000 timeout 120;
iptables -N antiddosyuki -t raw;
iptables -A PREROUTING -p udp -m set ! --match-set antiddos_yuki src -t raw -j antiddosyuki;
iptables -A antiddosyuki -t raw -j SET --add-set antiddos_yuki src;
iptables -A antiddosyuki -t raw -j DROP;

# Block unusual Layer3 Protocols
iptables -A INPUT -p esp -j DROP;
iptables -A INPUT -p gre -j DROP;
iptables -A INPUT -p ah -j DROP;

# Block all packets from broadcast
# In my experience, this rule helps a bit to mitigate some attacks
iptables -t raw -A Broadcast -m pkttype --pkt-type broadcast -j DROP;

# Just IPv6 simple protection
ip6tables -t raw -A PREROUTING -p icmpv6 -j DROP;
ip6tables -t raw -A PREROUTING -p icmpv6 -m limit --limit 4/s -j ACCEPT;
ip6tables -t raw -A PREROUTING -p tcp --syn -m limit --limit 20/s --limit-burst 10 -j ACCEPT;

clear;


# ━━━━━━━━━━━━
# Main tweaks
# ━━━━━━━━━━━━


# Decrease some timeouts for better resistance to DDoS
echo "net.netfilter.nf_conntrack_tcp_timeout_last_ack = 10" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_close = 5" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_close_wait = 3" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_time_wait = 1" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 15" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 15" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 15" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 30" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_generic_timeout = 120" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_udp_timeout_stream = 30" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_udp_timeout = 15" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_icmp_timeout = 1" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_icmpv6_timeout = 1" >> /etc/sysctl.conf;

# Increase max open files for high-loaded servers
echo "fs.file-max = 2000000" >> /etc/sysctl.conf;

# Increase max connections for better network performance
echo "net.core.somaxconn = 56000" >> /etc/sysctl.conf;

# Enable TCP TW reuse for better performance
echo "net.ipv4.tcp_tw_reuse = 1" >> /etc/sysctl.conf;

# Enable ExecShield against many remote attacks
echo "kernel.exec-shield = 1" >> /etc/sysctl.conf;

# Increase SYN Backlog value for resistance to attacks
echo "net.ipv4.tcp_max_syn_backlog = 16384" >> /etc/sysctl.conf;

# Decrease SYN and SYN-ACK retries against SYN Floods
echo "net.ipv4.tcp_synack_retries = 1" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_syn_retries = 2" >> /etc/sysctl.conf;

# Increase netdev backlog. Improves network speed under heavy load
echo "net.core.netdev_max_backlog = 100000" >> /etc/sysctl.conf;

# ACK Loop DoS Attack Mitigation
echo "net.ipv4.tcp_invalid_ratelimit = 4000" >> /etc/sysctl.conf;

# RFC 1337 Against TCP TW assassinations
echo "net.ipv4.tcp_rfc1337 = 1" >> /etc/sysctl.conf


# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Other tweaks (better performance, better security.)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

echo "net.ipv4.route.flush = 1" >> /etc/sysctl.conf;
echo "net.ipv6.route.flush = 1" >> /etc/sysctl.conf;
echo "net.ipv6.route.max_size = 2147483647" >> /etc/sysctl.conf;
echo "net.ipv4.route.max_size = 2147483647" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.send_redirects = 0" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.accept_source_route = 0" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_redirect = 0" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_ra = 0" >> /etc/sysctl.conf;
echo "net.ipv6.icmp.echo_ignore_anycast = 1" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.drop_unsolicited_na = 1" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.use_tempaddr = 2" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.drop_unicast_in_l2_multicast = 1" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.drop_unicast_in_l2_multicast = 1" >> /etc/sysctl.conf;
echo "net.ipv6.icmp.echo_ignore_multicast = 1" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.drop_gratuitous_arp = 1" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.arp_ignore = 1" >> /etc/sysctl.conf;
echo "net.ipv4.igmp_link_local_mcast_reports = 0" >> /etc/sysctl.conf;
echo "kernel.dmesg_restrict = 1" >> /etc/sysctl.conf;
echo "kernel.randomize_va_space = 2" >> /etc/sysctl.conf;
echo "kernel.nmi_watchdog = 0" >> /etc/sysctl.conf;
echo "fs.protected_symlinks = 1" >> /etc/sysctl.conf;
echo "fs.protected_hardlinks = 1" >> /etc/sysctl.conf;
echo "kernel.unprivileged_bpf_disabled = 1" >> /etc/sysctl.conf;
echo "kernel.sched_tunable_scaling = 1" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_moderate_rcvbuf = 1" >> /etc/sysctl.conf;
echo "net.ipv4.icmp_ignore_bogus_error_responses = 1" >> /etc/sysctl.conf;
echo "net.ipv4.icmp_echo_ignore_broadcasts = 1" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.secure_redirects = 1" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_redirect = 0" >> /etc/sysctl.conf;
echo "net.ipv6.echo_ignore_multicast = 1" >> /etc/sysctl.conf;
echo "net.ipv6.echo_ignore_anycast = 1" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_helper = 0" >> /etc/syctl.conf;
echo "net.ipv4.ip_local_port_range=1024 65535" >> /etc/sysctl.conf
echo "net.netfilter.nf_conntrack_tcp_loose = 0" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_max = 10000000" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_mtu_probing = 1" >> /etc/sysctl.conf;
echo "kernel.sched_energy_aware = 1" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_slow_start_after_idle = 0" >> /etc/sysctl.conf;


# Save all rules and tweaks
iptables-save;
ip6tables-save;
sysctl -p;
clear;
# Remove clear commands if you want to see stdout

echo -e "${LightBlue}"
echo "[+] Script changes applied"
echo "[+] Now you have better protection against DDoS!"

# ToDo:
# Add to text above some info from README.md
# For example: info about which attacks are blocked

# Want to delete rule? Replace -A (or -I) to -D and apply!

# If you want do delete ALL iptables rules,
# type iptables -F; ip6tables -F
# And do not forget to save your changes:
# iptables-save; ip6tables-save

# Made by yuki with love
