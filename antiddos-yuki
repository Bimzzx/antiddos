#!/bin/bash
# this script will protect ur server
# against DDoS using iptables and UFW
LightBlue='\033[1;34m'

echo -e "${LightBlue}> Adding rules to iptables and UFW..."
sleep 1;

# Want to update the rules?
# Remove previous, using iptables -F and save them
# And apply new rules

# Allow only rate-limited ICMP and block useless types
iptables -t raw -A PREROUTING -p icmp --icmp-type address-mask-request -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type timestamp-request -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type router-solicitation -j DROP;
iptables -t raw -A PREROUTING -p icmp -m limit --limit 2/s -j ACCEPT;

# Block SYN-Flood Attacks
iptables -t raw -A PREROUTING -p tcp --syn -m limit --limit 4/s --limit-burst 3 -j ACCEPT;

# Block unusual TCP flags
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

# Block all TCP packets in new conn, that not SYN
iptables -t raw -A PREROUTING -p tcp ! --syn -m state --state NEW -j DROP;

# Block IPs of known botnet
iptables -t raw -A PREROUTING -s 39.17.1.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 14.139.112.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 103.107.113.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 27.185.23.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 211.242.56.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 103.7.148.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 124.123.26.0/24 -j DROP;

# Block broadcast
iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP;

# Block useless ports for additional protection
iptables -t raw -A PREROUTING -p UDP --dport 19 -j DROP;
iptables -t raw -A PREROUTING -p UDP --dport 7 -j DROP;
iptables -t raw -A PREROUTING -p TCP --dport 135:139 -j DROP;
iptables -t raw -A PREROUTING -p UDP --dport 135:139 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 445 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 1900 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 3389 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 23 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 25 -j DROP;

# Limit incoming UDP packets
iptables -A INPUT -p UDP -m limit --limit 150/s -j ACCEPT;

# Block certain suspicious packets
iptables -A INPUT -p udp -m u32 --u32 "26&0xFFFFFFFF=0xfeff" -j DROP;
iptables -A INPUT -p udp -m udp -m string --algo bm --from 28 --to 29 --string "0123456789ABCDE" -j DROP;
iptables -I INPUT -p udp -m udp -m string --hex-string "|7374640000000000|" --algo kmp --from 28 --to 29 -j DROP;
iptables -I INPUT -p tcp -m tcp -m string --hex-string "|000000005010|" --algo kmp --from 28 --to 29 -m length --length 40 -j DROP;
iptables -A INPUT -m u32 --u32 "28&0x00000FF0=0xFEDFFFFF" -j DROP;
iptables -A INPUT -p udp -m u32 --u32 "22&0xFFFF=0x0008" -j DROP;
iptables -I INPUT -p udp --dport 16000:29000 -m string --to 75 --algo bm --string 'HTTP/1.1 200 OK' -j DROP;
iptables -A INPUT -m u32 --u32 "12&0xFFFF=0" -j DROP;
iptables -I INPUT -p tcp -m tcp -m string --hex-string "|000000005010|" --algo kmp --from 28 --to 29 -m length --length 40 -j DROP;
iptables -A INPUT -m u32 --u32 "12&0xFFFF=0xFFFF" -j DROP;

# Block NTP, DNS (not only) spoofed attacks
iptables -t raw -A PREROUTING -p udp --sport 123 -m limit --limit 2/s --limit-burst 10 -j ACCEPT;
iptables -t raw -A PREROUTING -p UDP --dport 5432 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 53 -m limit --limit 4/s --limit-burst 10 -j ACCEPT;
iptables -t raw -A PREROUTING -p udp --sport 5432 -m limit --limit 3/s --limit-burst 10 -j ACCEPT;

# Limit PPS using UFW
ufw limit 80;
ufw limit 443;

# Protection against portscanning, not tested
iptables -N port-scan;
iptables -A port-scan -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN;
iptables -A port-scan -j DROP;
iptables -A INPUT -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset;

# Allow only rate-limited TCP RST Packets
iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP;
iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT;

# Limit new connections on port 80
iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set;
iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 10 --hitcount 50 -j DROP

# Global conn-limit
iptables -A INPUT -p tcp -m connlimit --connlimit-above 100 -j REJECT --reject-with tcp-reset;

# Drop all fragmented packets on PREROUTING
iptables -t raw -A PREROUTING -f -j DROP;

# Block invalid packets
iptables -t raw -A PREROUTING -m state --state INVALID -j DROP;

# UDP spoofing load reduction
ipset create antiddos_yuki hash:ip hashsize 16777216 maxelem 40000000 timeout 120;
iptables -N antiddosyuki -t raw;
iptables -A PREROUTING -p udp -m set ! --match-set antiddos_yuki src -t raw -j antiddosyuki;
iptables -A antiddosyuki -t raw -j SET --add-set antiddos_yuki src;
iptables -A antiddosyuki -t raw -j DROP;

# IPv6 Protection
ip6tables -t raw -A PREROUTING -p icmpv6 -m limit --limit 4/s -j ACCEPT;
ip6tables -t raw -A PREROUTING -p tcp --syn -m limit --limit 6/s --limit-burst 30 -j ALLOW
ip6tables -t raw -A PREROUTING -m state --state INVALID -j DROP;

# TCP Syncookies protection
echo "net.ipv4.tcp_syncookies = 1" >> /etc/sysctl.conf;

# Save all rules
iptables-save;
sysctl -p;
clear;
sleep 0.3;

echo "> Rules successfully applied and saved"
echo "> Want to delete rule? Replace -A (or -I) to -D and apply!"
echo "> If u want to reset all rules, type iptables -F"
echo "> Don't forget about iptables-save"
