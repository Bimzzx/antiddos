#!/bin/bash
# This script will protect ur server
# against some attacks like DDoS, MiTM, etc, using iptables, kernel tuning
# And it can improve performance of ur server

# LightBlue='\033[1;34m'

# echo -e "${LightBlue}> Adding rules to iptables and UFW..."

# Want to update the rules?
# Remove previous using iptables -F and save them
# And apply new rules

# Install required packages
apt install iptables iptables-persistent ipset -y && pip install lolcat

# ------------------------------------

# Allow only rate-limited ICMP and block useless types
iptables -t raw -A PREROUTING -p icmp --icmp-type address-mask-request -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type timestamp-request -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type router-solicitation -j DROP;
iptables -t raw -A PREROUTING -p icmp -m limit --limit 2/s -j ACCEPT;

# Protection against BlackNurse Attack
iptables -t raw -A PREROUTING -p icmp --icmp-type 8 -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type 8 -m limit --limit 1/s -j ACCEPT;

# Protection against UDP DDoS On randports, when you server flooding "icmp port unreach"
iptables -A OUTPUT -p icmp --icmp-type port-unreach -j DROP;
iptables -A OUTPUT -p icmp --icmp-type port-unreach -m limit --limit 3/s -j ACCEPT;

# Block SYN-Flood Attacks
iptables -t raw -A PREROUTING -p tcp --syn -m limit --limit 30/s --limit-burst 3 -j ACCEPT;

# Block unusual TCP flags (good against some DDoS on TCP)
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

# Block all TCP packets in new connection, that not SYN, against some ACK Flood
iptables -t raw -A PREROUTING -p tcp ! --syn -m state --state NEW -j DROP;

# Block IPs of known botnet
iptables -t raw -A PREROUTING -s 39.17.1.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 14.139.112.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 103.107.113.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 27.185.23.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 211.242.56.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 103.7.148.0/24 -j DROP;
iptables -t raw -A PREROUTING -s 124.123.26.0/24 -j DROP;

# Block broadcast (good against spoof)
iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP;

# Block useless and unusual ports for additional protection
iptables -t raw -A PREROUTING -p UDP --dport 19 -j DROP;
iptables -t raw -A PREROUTING -p UDP --dport 7 -j DROP;
iptables -t raw -A PREROUTING -p TCP --dport 135:139 -j DROP;
iptables -t raw -A PREROUTING -p UDP --dport 135:139 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 445 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 1900 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 3389 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 23 -j DROP;
iptables -t raw -A PREROUTING -p tcp --dport 25 -j DROP;

# Limit incoming UDP packets against UDP DDoS
iptables -A INPUT -p UDP -j DROP;
iptables -A INPUT -p UDP -m limit --limit 100/s -j ACCEPT;

# Block certain suspicious packets
iptables -A INPUT -p udp -m u32 --u32 "26&0xFFFFFFFF=0xfeff" -j DROP;
iptables -A INPUT -p udp -m udp -m string --algo bm --from 28 --to 29 --string "0123456789ABCDE" -j DROP;
iptables -I INPUT -p udp -m udp -m string --hex-string "|7374640000000000|" --algo kmp --from 28 --to 29 -j DROP;
iptables -I INPUT -p tcp -m tcp -m string --hex-string "|000000005010|" --algo kmp --from 28 --to 29 -m length --length 40 -j DROP;
iptables -A INPUT -m u32 --u32 "28&0x00000FF0=0xFEDFFFFF" -j DROP;
iptables -A INPUT -p udp -m u32 --u32 "22&0xFFFF=0x0008" -j DROP;
iptables -I INPUT -p udp --dport 16000:29000 -m string --to 75 --algo bm --string 'HTTP/1.1 200 OK' -j DROP;
iptables -A INPUT -m u32 --u32 "12&0xFFFF=0" -j DROP;
iptables -I INPUT -p tcp -m tcp -m string --hex-string "|000000005010|" --algo kmp --from 28 --to 29 -m length --length 40 -j DROP;
iptables -A INPUT -m u32 --u32 "12&0xFFFF=0xFFFF" -j DROP;

# Block NTP, DNS (not only) spoofed attacks
# ToDo: block other spoofs, use multiport
iptables -t raw -A PREROUTING -p udp --sport 123 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 53 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 5432 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 17185 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 7001 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 123 -m limit --limit 2/s --limit-burst 2 -j ACCEPT;
iptables -t raw -A PREROUTING -p udp --dport 5432 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 53 -m limit --limit 4/s --limit-burst 10 -j ACCEPT;
iptables -t raw -A PREROUTING -p udp --sport 5432 -m limit --limit 3/s --limit-burst 7 -j ACCEPT;

# Connections limit
iptables -A INPUT -p tcp -m connlimit --connlimit-above 150 -j REJECT --reject-with tcp-reset;
iptables -A INPUT -p tcp --syn -m iplimit --iplimit-above 9 -j DROP;

# Allow only rate-limited TCP RST Packets against TCP RST Flood Attacks
iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP;
iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT;

# Limit new connections on port 80 for additional protection
# ToDo: make the same limit but for ssh port
iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set;
iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 10 --hitcount 50 -j DROP

# Drop all fragmented and big packets on PREROUTING against most fraggle attacks
iptables -t raw -A PREROUTING -f -j DROP;

# Block invalid packets against attacks that using invalid packets
iptables -t mangle -A PREROUTING -m state --state INVALID -j DROP;
# If this rule disables internet access = use rules below
# iptables -I INPUT -p TCP -m state --state INVALID -j DROP
# iptables -I INPUT -p UDP -m state --state INVALID -j DROP
# iptables -I INPUT -p ICMP -m state --state INVALID -j DROP

# UDP spoofing load reduction
ipset create antiddos_yuki hash:ip hashsize 16777216 maxelem 40000000 timeout 120;
iptables -N antiddosyuki -t raw;
iptables -A PREROUTING -p udp -m set ! --match-set antiddos_yuki src -t raw -j antiddosyuki;
iptables -A antiddosyuki -t raw -j SET --add-set antiddos_yuki src;
iptables -A antiddosyuki -t raw -j DROP;

# Block some Layer3 Protocols
iptables -A INPUT -p ah -j DROP;
iptables -A INPUT -p esp -j DROP;
iptables -A INPUT -p gre -j DROP;

# Just IPv6 overall Protection
ip6tables -t raw -A PREROUTING -p icmpv6 -j DROP;
ip6tables -t raw -A PREROUTING -p icmpv6 -m limit --limit 4/s -j ACCEPT;
ip6tables -t raw -A PREROUTING -p tcp --syn -m limit --limit 20/s --limit-burst 30 -j ACCEPT
ip6tables -t mangle -A PREROUTING -m state --state INVALID -j DROP;
# Use the same fix (that in IPv4) if last rule disables internet access

# Open SSH Port (fix ssh connection issues)
iptables -t raw -A PREROUTING -p tcp --dport 22 -m limit --limit 5/s --limit-burst 20 -j ACCEPT

# ------------------------------------

# TCP Syncookies - good against SYN Flood attack
echo "net.ipv4.tcp_syncookies = 1" >> /etc/sysctl.conf;

# Reverse-path filter against spoofing your server
echo "net.ipv4.conf.all.rp_filter = 1" >> /etc/sysctl.conf;

# Disable IP Forward for additional protection, dont use on routers
echo "net.ipv4.ip_forward = 0" >> /etc/sysctl.conf;

# Decrease timeout for last_ack against SYN attacks
echo "net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20" >> /etc/sysctl.conf;

# Decrease timeout for closing conns for better performance and resistance to attacks
echo "net.netfilter.nf_conntrack_tcp_timeout_close = 5" >> /etc/sysctl.conf;

# Decrease timeout for UDP against some attacks
echo "net.ipv4.netfilter.ip_conntrack_udp_timeout = 20" >> /etc/sysctl.conf;

# Decrease timeout for close_wait against TCP attacks
echo "net.netfilter.nf_conntrack_tcp_timeout_close_wait = 5" >> /etc/sysctl.conf;

# Increase max open files for high-loaded servers
echo "fs.file-max = 2000000" >> /etc/sysctl.conf;

# Increase max connections value to MAX for better network performance
echo "net.core.somaxconn = 65535" >> /etc/sysctl.conf;
# Dont use this value on single-threaded server

# Enable TCP TW reuse for better performance
echo "net.ipv4.tcp_tw_reuse = 1" >> /etc/sysctl.conf;

# Decrease swappiness for better performance
echo "vm.swappiness = 30" >> /etc/sysctl.conf;

# Enable ExecShield (additional protection)
echo "kernel.exec-shield = 1" >> /etc/sysctl.conf;

# Disable ARP Proxy, overall protection
echo "net.ipv4.conf.all.proxy_arp = 0" >> /etc/sysctl.conf;

# Increase SYN Backlog value for better performance and resistance to attacks
echo "net.ipv4.tcp_max_syn_backlog = 16384" >> /etc/sysctl.conf;

# Decrease SYN-ACK retries value against sophisticated attacks
echo "net.ipv4.tcp_synack_retries = 1" >> /etc/sysctl.conf;

# Decrease SYN retries value, better protect against SYN Flood
echo "net.ipv4.tcp_syn_retries = 2" >> /etc/sysctl.conf;

# Increase netcore max backlog. Improves network speed under heavy load conditions
echo "net.core.netdev_max_backlog = 200000" >> /etc/sysctl.conf;
# Dont use this value on single-threaded server

# Overall network security hardening and performance tweaks
echo "net.ipv4.conf.all.mc_forwarding = 0" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_no_metrics_save = 1" >> /etc/sysctl.conf;
echo "net.ipv4.route.flush = 1" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.send_redirects = 0" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.accept_source_route = 0" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_redirect = 0" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_ra = 0" >> /etc/sysctl.conf;
echo "net.ipv6.route.flush = 1" >> /etc/sysctl.conf;
echo "net.ipv4.icmp_ignore_bogus_error_responses = 1" >> /etc/sysctl.conf;
echo "net.ipv4.icmp_echo_ignore_broadcasts = 1" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.secure_redirects = 1" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_redirect = 0" >> /etc/sysctl.conf;
# (src_valid_mark) leave 1 for security or set 0 for compatibility
echo "net.ipv4.src_valid_mark = 1" >> /etc/sysctl.conf;
echo "net.ipv6.echo_ignore_multicast = 1" >> /etc/sysctl.conf;
echo "net.ipv6.echo_ignore_anycast = 1" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_rfc1337 = 1" >> /etc/sysctl.conf;
echo "net.ipv4.conf.interface.mc_forwarding = 0" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_helper = 0" >> /etc/syctl.conf;
echo "net.ipv4.ip_local_port_range=1024 65535" >> /etc/sysctl.conf
echo "net.core.optmem_max = 25165824" >> /etc/sysctl.conf;
echo "net.core.wmem_max = 67108864" >> /etc/sysctl.conf;
echo "net.core.wmem_default = 31457280" >> /etc/sysctl.conf;
echo "net.core.rmem_default = 31457280" >> /etc/sysctl.conf;
echo "net.core.rmem_max = 67108864" >> /etc/sysctl.conf;
echo "net.core.rmem_default = 31457280" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_time_wait = 5" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_loose = 0" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_max = 10000000" >> /etc/sysctl.conf;
echo "net.ipv4.route.max_size = 8048576" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_max_syn_backlog = 16384" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_invalid_ratelimit = 4000" >> /etc/sysctl.conf;
echo "net.ipv4.tcp_mtu_probing = 1" >> /etc/sysctl.conf;
echo "net.ipv4.icmp_ratelimit = 1000" >> /etc/sysctl.conf;

# Two options below may cause problems with network, use with caution
# echo "net.ipv4.tcp_ecn = 1" >> /etc/sysctl.conf;
# echo "net.ipv4.tcp_tw_recycle = 1" >> /etc/sysctl.conf;

# Save all rules
iptables-save;
ip6tables-save;
sysctl -p;
clear;
# Remove clear cmd, if u want to see stdout

echo "> Rules successfully applied and saved" | lolcat

# Want to delete rule? Replace -A (or -I) to -D and apply!

# I u want do delete ALL iptables rules, type iptables -F
# And do not forget about iptable-save, after iptables -F

# Made by yuki with love
