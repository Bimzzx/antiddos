#!/bin/bash
# Script that written to protect Linux Servers/PCs and routers

# You can use some tweaks on upstream linux router
# But, in this case, you need to replace INPUT -> FORWARD
# It will be give better protection to connected machines

# I recommend you to backup all data of your server before using

# Telegram of creator: @yuk1meow

# Use with UFW & Fail2ban & Any IPS for best results

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# ToDo:

# Automatic backup of previous netfilter and iptables rules
# Logs of script for debug
# Block methods of public DDoS scripts
# Better IPv6 Protection
# Use tarpit for port-blocking to slow down port scanners ;)
# Variables for iptables-save, netfilter-persistent...
# Rewrite protocol names in capital letters
# Add comments to the rules
# Add question like "drop invalid packets?"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Configuration

# iptables (nftables), iptables, ip6tables (nftables), ipset
IP="/sbin/iptables-nft"
IPT="/sbin/iptables"
IP6="/sbin/ip6tables-nft"
IPS="/sbin/ipset"

# SSH Port
# For example: 2222
# Default: 22 (ssh)
SSH="ssh"

# Connection limit (per one IP)
# Recommended: 100
# If you server has only SSH,
# And you are under TCP DDoS,
# You can set here value ~50
CL="100"

# Logging (Currently not used)
# LOG="LOG -m limit --limit 30/min --log-level debug --log-tcp-sequence --log-tcp-options --log-ip-options"

# Where located your sysctl conf file?
# SC="/etc/sysctl.conf"

# Enable SYN Proxy for some ports
# To mitigate powerful SYN Floods
SYNPROXY="22,80,443"

# Connection limit action
# Recommended: REJECT
# Under DDoS you can set DROP here
# To reduce the load on the CPU
CLA="REJECT --reject-with tcp-reset"

# Color
LightBlue='\033[1;36m'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Show warning if the script is not started as root

if [ "$(whoami)" != "root" ]; then
         echo -e "${LightBlue}[!] Run this script as root"
        exit 255
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Backup sysctl file
# if it exists it will be overwritten
cp /etc/sysctl.conf{,.backup}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Delete previous netfilter rules
nft flush chain inet filter input

# Reset iptables counters
"$IP" -Z
"$IPT" -Z

# Remove user chains in iptables
"$IP" -X
"$IPT" -X

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

clear;

echo -e "${LightBlue}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "        >> AntiDDoS Script by yuki <<        "
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

while true; do
     echo -e "${LightBlue}\r"
    read -r -p "[+] Enable reverse-path filter? He blocks spoofed packets, but incompatible with asymmetric routing. Recommended: y >> " yn
    case $yn in
        [Yy]* )  echo "net.ipv4.conf.all.rp_filter = 1" >> /etc/sysctl.conf; break;;
        [Nn]* )  echo "OK, skipped" ; break;;
        * )  echo "Enter correct answer, pls.";;
    esac
done
    read -r -p "[+] Enable TCP TW Recycle and TCP ECN? Recycle may cause problems with load-balancers, and ECN need to be supported by routers. Recommended: n >> "
    case $yn in
        [Yy]* )  echo "net.ipv4.tcp_ecn = 1" >> /etc/sysctl.conf ;  echo "net.ipv4.tcp_tw_recycle = 1" >> /etc/sysctl.conf ;;
        [Nn]* )  echo "OK, skipped" ;;
        * )  echo "Enter correct answer";;
    esac

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# "$IP" -N DL # "DL" means DROP packet and log it
# "$IP" -A DL -j $LOG --log-prefix "[yuki AntiDDoS] "
# "$IP" -A DL -j DROP;

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#   >>   Permissive rules   <<
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Allow lo without any limits
# To fix problems with reverse-proxy (like nginx)
 "$IP" -I INPUT -i lo -j ACCEPT
 "$IP" -I OUTPUT -o lo -j ACCEPT

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#      >>  Protection  <<
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Protection against UDP-DoS and SYN-DoS
 "$IP" -t raw -I PREROUTING -p udp --match hashlimit --hashlimit-above 400/second --hashlimit-mode srcip --hashlimit-name udpflood -j DROP
 "$IP" -t raw -I PREROUTING -p tcp --syn --match hashlimit --hashlimit-above 4/second --hashlimit-mode srcip --hashlimit-name synflood -j DROP

# Main ICMP Protection (Block ICMP Floods, ICMP Timestamping, etc)
 "$IP" -t raw -I PREROUTING -p icmp --icmp-type address-mask-request -j DROP
 "$IP" -t raw -I PREROUTING -p icmp --icmp-type router-solicitation -j DROP
 "$IP" -t raw -I PREROUTING -p icmp --icmp-type timestamp-request -j DROP
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type echo-request -m limit --limit 2/s -j ACCEPT
 "$IP" -t raw -A PREROUTING -p icmp --icmp-type echo-request -j DROP
 "$IP" -t raw -A PREROUTING -p icmp -m limit --limit 2/s -j ACCEPT
 "$IP" -t raw -A PREROUTING -p icmp -j DROP

# Block unusual TCP MSS Value
 "$IP" -t mangle -I PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP

# Limit outgoing ICMP Port-unreachable messages
# Helps fight off UDP DDoS on random destination ports
 "$IP" -t raw -A POSTROUTING -p icmp --icmp-type port-unreach -m limit --limit 11/m -j ACCEPT
 "$IP" -t raw -A POSTROUTING -p icmp --icmp-type port-unreach -j DROP

# Block bogus TCP flags
# Helps fight off TCP Null Attack (only attack type w/o flags, not with zero length), TCP XMAS Attack, etc
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
 # "$IP" -t raw -A PREROUTING -p tcp --tcp-flags

# Block some unsecure/useless ports
# Helps fight off: SIP Flood, CharGEN DDoS, NetBIOS AMP, SSDP AMP, etc
 "$IP" -t raw -I PREROUTING -p UDP -m multiport --dports 7,19,25,135,136,137,138,139,445,1900,3389,5060 -j DROP
 "$IP" -t raw -I PREROUTING -p TCP -m multiport --dports 7,19,25,135,136,137,138,139,445,1900,3389,5060 -j DROP

# Block LAND and BLAT Attack
 "$IP" -t raw -I PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP

# Block SYN sPort less than 1024
 "$IP" -t raw -I PREROUTING -p tcp --syn ! --sport 1024:65535 -j DROP

# Limit NTP/DNS packets
# Helps fight off DNS AMP and NTP AMP
 "$IP" -t raw -A PREROUTING -p udp --sport 123 -m limit --limit 2/s --limit-burst 1 -j ACCEPT
 "$IP" -t raw -A PREROUTING -p udp --sport 53 -m limit --limit 4/s -j ACCEPT
 "$IP" -t raw -A PREROUTING -p udp --sport 5432 -m limit --limit 4/s -j ACCEPT
 "$IP" -t raw -A PREROUTING -p udp -m multiport --sports 5432,17185,7001,1900,9000,53,123 -j DROP

# Limit connections per one IP (max: 80)
# Helps fight off "SLOW" attacks (attacks with many connections)
 # "$IP" -t raw -I PREROUTING -p tcp -m connlimit --connlimit-above $CL -j DROP
 "$IP" -I INPUT -p tcp --syn -m connlimit --connlimit-above $CL -j $CLA 

# Limit TCP "Reset" Packets per second
# Helps fight off TCP RST Flood
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
 "$IP" -t raw -A PREROUTING -p tcp --tcp-flags RST RST -j DROP

# Block FIN Flood (?)


# Protect SSH against many conn attemps per minute from one IP
 "$IP" -t mangle -I PREROUTING -p tcp --dport $SSH -m state --state NEW -m recent --set
 "$IP" -t mangle -I PREROUTING -p tcp --dport $SSH -m state --state NEW -m recent --update --seconds 60 --hitcount 20 -j DROP

# Enable SYN Proxy for specified ports
# Helps fight off powerful SYN floods
 "$IP" -I INPUT -p tcp -m multiport --dports $SYNPROXY -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --timestamp --sack-perm

# Drop packets with incorrect port
# "$IP" -I INPUT -p udp ! --dport 0:65535 -m multiport --sports 0:65535 -j DROP
# "$IP" -I INPUT -p tcp ! --dport 0:65535 -m multiport --sports 0:65535 -j DROP

# Drop all fragmented packets
# Helps fight off Fragmented TCP/UDP/ICMP etc Attacks
 "$IP" -t raw -A PREROUTING -f -j DROP

# Block NEW packets that not SYN
# Helps fight off TCP ACK Flood, TCP SYN-ACK Flood, TCP RST/FIN Flood
 "$IP" -t raw -I PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

# Block zero-length TCP and UDP
# Helps fight off UDP-NULL, TCP-NULL attacks
 "$IP" -t raw -I PREROUTING -p tcp -m length --length 0 -j DROP
 "$IP" -t raw -I PREROUTING -p udp -m length --length 0 -j DROP

# UDP Spoofing load reduction
 "$IPS" create antiddos_yuki hash:ip hashsize 16777216 maxelem 40000000 timeout 120
 "$IP" -N antiddosyuki -t raw
 "$IP" -A PREROUTING -p udp -m set ! --match-set antiddos_yuki src -t raw -j antiddosyuki
 "$IP" -A antiddosyuki -t raw -j SET --add-set antiddos_yuki src
 "$IP" -A antiddosyuki -t raw -j DROP

# Block some IPs
# Here we use ipset with big hashsize, so it doesnt affect performance
 "$IPS" create blacklist nethash hashsize 260000
 "$IPS" add blacklist 240.0.0.0/5
 "$IPS" add blacklist 172.16.0.0/12
 "$IPS" add blacklist 169.254.0.0/16
 "$IPS" add blacklist 224.0.0.0/3
 "$IP" -t raw -A PREROUTING -m set --match-set blacklist src -j DROP

# Block unusual Layer3 Protocols
# Helps fight off ESP/GRE/AH Flood
# [!] May block IPsec
 "$IP" -t raw -A PREROUTING -p esp -j DROP
 "$IP" -t raw -A PREROUTING -p gre -j DROP
 "$IP" -t raw -A PREROUTING -p ah -j DROP

# Block all packets from broadcast
# Helps fight off Fraggle Attack & Smurf Attack
 "$IP" -t raw -I PREROUTING -m pkttype --pkt-type broadcast -j DROP

# Just IPv6 simple protection
# Helps fight off: Simple ICMPv6 Attacks, Simple SYN Floods
 "$IP"6 -t raw -A PREROUTING -p icmpv6 -m limit --limit 4/s -j ACCEPT
 "$IP"6 -t raw -A PREROUTING -p icmpv6 -j DROP
 "$IP"6 -t raw -A PREROUTING -p tcp --syn -m limit --limit 3/s --limit-burst 10 -j ACCEPT
 

# ━━━━━━━━━━━━
# Main tweaks
# ━━━━━━━━━━━━

 echo -e "
#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

#kernel.domainname = example.com

# Uncomment the following to stop low-level messages on console
#kernel.printk = 3 4 1 3

# Tweaks by https://github.com/yuk1c/antiddos

# Custom netfilter timeouts.
 net.netfilter.nf_conntrack_tcp_timeout_last_ack = 10
 net.netfilter.nf_conntrack_tcp_timeout_close = 5
 net.netfilter.nf_conntrack_tcp_timeout_close_wait = 3
 net.netfilter.nf_conntrack_tcp_timeout_time_wait = 1
 net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 15
 net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 15
 net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 15
 net.netfilter.nf_conntrack_tcp_timeout_unacknowledged = 30
 net.netfilter.nf_conntrack_generic_timeout = 120
 net.netfilter.nf_conntrack_udp_timeout_stream = 30
 net.netfilter.nf_conntrack_udp_timeout = 10
 net.netfilter.nf_conntrack_icmp_timeout = 1
 net.netfilter.nf_conntrack_icmpv6_timeout = 1

# SYN Cookies and custom SYN Backlog.
 net.ipv4.tcp_syncookies = 1
 net.ipv4.tcp_max_syn_backlog = 2048

# Custom limit for max opened files.
 fs.file-max = 2000000

# Custom limit for max opened connections.
 net.core.somaxconn = 500000

# TCP TimeWait Reuse.
 net.ipv4.tcp_tw_reuse = 1

# Custom SYN and SYN-ACK Retries.
 net.ipv4.tcp_synack_retries = 1
 net.ipv4.tcp_syn_retries = 2

# Custom backlog for network device.
 net.core.netdev_max_backlog = 1000000

# Custom ratelimit for invalid/bad TCP packets.
 net.ipv4.tcp_invalid_ratelimit = 4000

# RFC 1337.
 net.ipv4.tcp_rfc1337 = 1

# Custom network buffers.
 net.core.rmem_max = 33554432
 net.core.wmem_max = 33554432

# Use TCP MTU Probing when ICMP Blackhole detected.
 net.ipv4.tcp_mtu_probing = 1

# Custom route table size.
 net.ipv6.route.max_size = 2147483647
 net.ipv4.route.max_size = 2147483647

# Block spoofed packets.
 net.ipv4.conf.all.send_redirects = 0
 net.ipv4.conf.all.accept_source_route = 0
 net.ipv6.conf.all.accept_redirect = 0
 net.ipv6.conf.all.accept_ra = 0
 net.ipv4.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.conf.all.drop_unicast_in_l2_multicast = 1
 net.ipv6.icmp.all.ignore_anycast = 1
 net.ipv6.icmp.all.ignore_multicast = 1
 net.ipv6.conf.all.drop_unsolicited_na = 1
 net.ipv6.conf.all.use_tempaddr = 2
 net.ipv4.conf.all.secure_redirects = 1
 net.ipv6.conf.all.accept_redirect = 0
 net.ipv4.icmp_ignore_broadcasts = 1
 net.ipv6.conf.all.ignore_multicast = 1
 net.ipv6.conf.all.ignore_anycast = 1

# Prevent ARP Spoofing.
 net.ipv4.conf.all.drop_gratuitous_arp = 1
 net.ipv4.conf.all.arp_ignore = 1

# Disable IGMP Multicast reports.
 net.ipv4.igmp_link_local_mcast_reports = 0

# Overall kernel hardening.
 kernel.dmesg_restrict = 1
 kernel.kptr_restrict = 1
 kernel.nmi_watchdog = 0
 fs.protected_symlinks = 1
 fs.protected_hardlinks = 1
 kernel.unprivileged_bpf_disabled = 1

# Performance tuning.
 kernel.sched_tunable_scaling = 1
 net.ipv4.tcp_moderate_rcvbuf = 1
 net.ipv4.tcp_slow_start_after_idle = 0

# Ignore ICMP Bogus responses.
 net.ipv4.icmp_ignore_bogus_error_responses = 1

# Disable conntrack helper.
 net.netfilter.nf_conntrack_helper = 0

# Increase max available source ports.
 net.ipv4.ip_local_port_range=1024 65535

# Disable conntrack TCP Loose.
 net.netfilter.nf_conntrack_tcp_loose = 0

# Increase max conntrack table size.
 net.netfilter.nf_conntrack_max = 10000000

# Power optimization.
 kernel.sched_energy_aware = 1" > /etc/sysctl.conf

# Save only ip6tables rules and tweaks
ip6tables-save;
#iptables-apply;
sysctl -p;
clear;
# Remove 'clear' if you want to see stdout

echo -e "${LightBlue}"
echo -e "[✓] Script changes applied, but iptables rules are not saved. Check the network now, and if it works, save the rules manually with sudo 'netfilter-persistent save' and 'sudo iptables-save'"
exit 0;

# Want to delete rule? Replace -A (or -I) with -D and apply!

# Made by yuki with love
