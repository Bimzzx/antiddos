#!/bin/bash
# Script that written to protect Linux Servers/PCs and routers

# You can use some tweaks on upstream linux router
# But, in this case, you need to replace INPUT -> FORWARD
# It will be give better protection

# I recommend you to backup all data of your server
# before using this script

# ------------------------------------
# ToDo:
# Make logging + customize it
# Auto-backup of sysctl.conf and iptables rules before execution
# Use -j antiddos-yuki or other custom -j
# Make "unstable" section
# Move unstable rules to "unstable" section
# Normal sort of rules
# Smart checks for some things
# If no answer presented - use recommended value
# New rules and tweaks (ONLY TESTED)
# Err handler & possible autofixer
# Full interactive configuration
# Add RFC 1337 to the questions
# Add L3 IPtables protocols blocking to the questions
# More variables, and if lolcat not installed - use color
# Replace some limits to /m instead of /s
# Set lower connlimit (and test it)
# REJECT For some rules
# Maybe, add limits for OUTPUT Packets, like TCP RST
# Better kernel tweaks
# Block methods of stressers like TCP-REF, UDP-NULL
# Block IPs Of free stressers using ipset+iptables
# Return UFW and add rules for him

# ------------------------------------
# Variables

# Color
LightBlue='\033[1;34m'

# Logging (not tested and not used)
# LOG="LOG --log-level debug --log-tcp-sequence --log-tcp-options"
# LOG="$LOG --log-ip-options"

# ------------------------------------
# Show warning if script is not started as root (not tested)

#if [ "$(whoami)" != "root" ]; then
#        echo -e "${LightBlue}[!] Run this script as root"
#        exit 255
#fi

# ------------------------------------

clear;

echo -e "${LightBlue}"
echo "============================================="
echo "           AntiDDoS Script by yuki           "
echo "============================================="

# ------------------------------------

while true; do
    echo -e "${LightBlue}\r"
    read -p "[+] Use SynCookies? He protect you against SYN DoS, but may cause overload under attack (on slow servers), recommended: y >> " yn
    case $yn in
        [Yy]* ) echo "net.ipv4.tcp_syncookies = 1" >> /etc/sysctl.conf; break;;
        [Nn]* ) echo Okay, skipped.; break;;
        * ) echo "Enter correct answer, pls.";;
    esac
done
read -p "[+] Enable reverse-path filter? He help you against spoofing, but may cause problems, recommended: y >> " yn
    case $yn in
        [Yy]* ) echo "net.ipv4.conf.all.rp_filter = 1" >> /etc/sysctl.conf;;
        [Nn]* ) echo Okay, skipped.;;
        * ) echo "Enter correct answer, pls.";;
    esac

read -p "[+] Enable MTU probing? It may increase network throughput, but on some servers it disables internet access, recommended: n >> " yn
    case $yn in
        [Yy]* ) echo "net.ipv4.tcp_mtu_probing = 1" >> /etc/sysctl.conf;;
        [Nn]* ) echo Okay, skipped.;;
        * ) echo "Enter correct answer, pls.";;
    esac

read -p "[+] Enable TCP TW Recycle and TCP ECN? Enable only if u really know, what are you doing. Recommended: n >> "
    case $yn in
        [Yy]* ) echo "net.ipv4.tcp_ecn = 1" >> /etc/sysctl.conf; echo "net.ipv4.tcp_tw_recycle = 1" >> /etc/sysctl.conf;;
        [Nn]* ) echo Okay.;;
        * ) echo "Enter correct answer, pls.";;
    esac
# ------------------------------------

# Will be added soon
#iptables -N TCP-Bogus-Flags
#iptables -N Broadcast
#iptables -N Spoof
#iptables -N Fragmented
#iptables -N Port-block
iptables -N Conn-limit;
#iptables -N Invalid

# ------------------------------------

iptables -A Conn-limit -j DROP;

# ------------------------------------

# Main ICMP Protection
iptables -t raw -A PREROUTING -p icmp --icmp-type address-mask-request -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type timestamp-request -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type router-solicitation -j DROP;
iptables -t raw -A PREROUTING -p icmp -m limit --limit 2/s -j ACCEPT;
iptables -t raw -A PREROUTING -p icmp --icmp-type 8 -j DROP;
iptables -t raw -A PREROUTING -p icmp --icmp-type 8 -m limit --limit 1/s -j ACCEPT;

# Protection against UDP DDoS on randports
# when your server flooding "ICMP: port unreachable"
iptables -A OUTPUT -p icmp --icmp-type port-unreach -j DROP;
iptables -A OUTPUT -p icmp --icmp-type port-unreach -m limit --limit 3/s -j ACCEPT;

# Block SYN-Flood Attacks
# May cause FPs
iptables -t raw -A PREROUTING -p tcp --syn -j DROP;
iptables -t raw -A PREROUTING -p tcp --syn -m limit --limit 30/s --limit-burst 5 -j ACCEPT;

# Allow lo without any limits
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# Rules against some TCP DDoS
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP;
iptables -t raw -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP;

# AntiSpoof (block broadcast)
iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP;

# Additional protection
iptables -t raw -A PREROUTING -p UDP -m multiport --dports 7,19,25,135,136,137,138,129,445,1900,3389 -j DROP;
iptables -t raw -A PREROUTING -p TCP -m multiport --dports 7,19,25,135,136,137,138,139,445,1900,3389 -j DROP;

# Limit incoming UDP packets against UDP DoS
# Set lower limit if 500/s doesnt help to mitigate attack
iptables -A INPUT -p UDP -j DROP;
iptables -A INPUT -p UDP -m limit --limit 500/s -j ACCEPT;

# Block certain suspicious packets
# Uncomment if you want to get additional protection
# And if network speed doesnt matter for you
#iptables -A INPUT -p udp -m u32 --u32 "26&0xFFFFFFFF=0xfeff" -j DROP;
#iptables -A INPUT -p udp -m udp -m string --algo bm --from 28 --to 29 --string "0123456789ABCDE" -j DROP;
#iptables -I INPUT -p udp -m udp -m string --hex-string "|7374640000000000|" --algo kmp --from 28 --to 29 -j DROP;
#iptables -I INPUT -p tcp -m tcp -m string --hex-string "|000000005010|" --algo kmp --from 28 --to 29 -m length --length 40 -j DROP;
#iptables -A INPUT -m u32 --u32 "28&0x00000FF0=0xFEDFFFFF" -j DROP;
#iptables -A INPUT -p udp -m u32 --u32 "22&0xFFFF=0x0008" -j DROP;
#iptables -I INPUT -p udp --dport 16000:29000 -m string --to 75 --algo bm --string 'HTTP/1.1 200 OK' -j DROP;
#iptables -A INPUT -m u32 --u32 "12&0xFFFF=0" -j DROP;
#iptables -I INPUT -p tcp -m tcp -m string --hex-string "|000000005010|" --algo kmp --from 28 --to 29 -m length --length 40 -j DROP;
#iptables -A INPUT -m u32 --u32 "12&0xFFFF=0xFFFF" -j DROP;

# Block NTP, DNS spoofed attacks
iptables -t raw -A PREROUTING -p udp -m multiport --sports 123,53,5432,17185,7001 -j DROP;
iptables -t raw -A PREROUTING -p udp --sport 123 -m limit --limit 2/s --limit-burst 2 -j ACCEPT;
iptables -t raw -A PREROUTING -p udp --sport 53 -m limit --limit 4/s --limit-burst 10 -j ACCEPT;
iptables -t raw -A PREROUTING -p udp --sport 5432 -m limit --limit 3/s --limit-burst 7 -j ACCEPT;

# Connections limit
iptables -A INPUT -p tcp -m connlimit --connlimit-above 100 -j Conn-limit;

# Allow only rate-limited TCP RST Packets against TCP RST Flood Attacks
iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP;
iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT;

# Limit new connections on port 80 for additional protection
# ToDo: make the same limit but for ssh port
iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set;
iptables -I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 10 --hitcount 50 -j DROP

# Drop all fragmented packets
# against most fraggle attacks
iptables -t raw -A PREROUTING -f -j DROP;

# Block invalid packets against attacks that using invalid packets
iptables -t mangle -A PREROUTING -m state --state INVALID -j DROP;
# If this rule disables internet access = use rules below
# iptables -I INPUT -p TCP -m state --state INVALID -j DROP
# iptables -I INPUT -p UDP -m state --state INVALID -j DROP
# iptables -I INPUT -p ICMP -m state --state INVALID -j DROP

# UDP spoofing load reduction
ipset create antiddos_yuki hash:ip hashsize 16777216 maxelem 40000000 timeout 120;
iptables -N antiddosyuki -t raw;
iptables -A PREROUTING -p udp -m set ! --match-set antiddos_yuki src -t raw -j antiddosyuki;
iptables -A antiddosyuki -t raw -j SET --add-set antiddos_yuki src;
iptables -A antiddosyuki -t raw -j DROP;

# Block some Layer3 Protocols
# Uncomment this to get additional protection
# But it not recommended
#iptables -A INPUT -p ah -j DROP;
#iptables -A INPUT -p esp -j DROP;
#iptables -A INPUT -p gre -j DROP;

# Just IPv6 overall Protection
ip6tables -t raw -A PREROUTING -p icmpv6 -j DROP;
ip6tables -t raw -A PREROUTING -p icmpv6 -m limit --limit 4/s -j ACCEPT;
ip6tables -t raw -A PREROUTING -p tcp --syn -m limit --limit 20/s --limit-burst 30 -j ACCEPT
ip6tables -t mangle -A PREROUTING -m state --state INVALID -j DROP;

# Fix possible ssh connection issues
iptables -t raw -A PREROUTING -p tcp --dport 22 -m limit --limit 5/s --limit-burst 20 -j ACCEPT

clear;

# ============================================================
# Sysctl tweaks (performance tweaks and additional protection)
# ============================================================

# You can uncomment option below if you dont use it on router
# And if you dont use VPN
# echo "net.ipv4.ip_forward = 0" >> /etc/sysctl.conf;

# Decrease some timeouts for better TCP DDoS Mitigation
echo "net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_close = 5" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_timeout_close_wait = 5" >> /etc/sysctl.conf;
echo "net.ipv4.netfiltet.ip_conntrack_udp_timeout = 20" >> /etc/sysctl.conf;

# Increase max open files for high-loaded servers
echo "fs.file-max = 2000000" >> /etc/sysctl.conf;

# Increase max connections for better network performance
# Use it only if your server is powerful
# echo "net.core.somaxconn = 65535" >> /etc/sysctl.conf;

# Enable TCP TW reuse for better performance
echo "net.ipv4.tcp_tw_reuse = 1" >> /etc/sysctl.conf;

# Decrease swappiness for better performance
# We dont use values like ~10 because they is too low
echo "vm.swappiness = 30" >> /etc/sysctl.conf;

# Enable ExecShield (additional protection)
echo "kernel.exec-shield = 1" >> /etc/sysctl.conf;

# Disable ARP Proxy, overall protection
# Use if you need ARP Protection
# echo "net.ipv4.conf.all.proxy_arp = 0" >> /etc/sysctl.conf;

# Increase SYN Backlog value for better performance and resistance to attacks
# Dont use on slow servers
echo "net.ipv4.tcp_max_syn_backlog = 16384" >> /etc/sysctl.conf;

# Decrease SYN-ACK retries value against sophisticated attacks
echo "net.ipv4.tcp_synack_retries = 1" >> /etc/sysctl.conf;

# Decrease SYN retries value, better protect against SYN Flood
echo "net.ipv4.tcp_syn_retries = 2" >> /etc/sysctl.conf;

# Increase netcore max backlog.
# Improves network speed under heavy load conditions
# If your server is single-threaded, dont use tweak below
echo "net.core.netdev_max_backlog = 100000" >> /etc/sysctl.conf;

# ACK Loop DoS Attack Mitigation
echo "net.ipv4.tcp_invalid_ratelimit = 4000" >> /etc/sysctl.conf;


# =========================================================
# Overall network security hardening and performance tweaks
# =========================================================

# ToDo: increase IPv6 route table size and test it

echo "net.ipv4.conf.all.mc_forwarding = 0" >> /etc/sysctl.conf;
echo "net.ipv4.route.flush = 1" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.send_redirects = 0" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.accept_source_route = 0" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_redirect = 0" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_ra = 0" >> /etc/sysctl.conf;
echo "net.ipv6.route.flush = 1" >> /etc/sysctl.conf;
echo "net.ipv4.icmp_ignore_bogus_error_responses = 1" >> /etc/sysctl.conf;
echo "net.ipv4.icmp_echo_ignore_broadcasts = 1" >> /etc/sysctl.conf;
echo "net.ipv4.conf.all.secure_redirects = 1" >> /etc/sysctl.conf;
echo "net.ipv6.conf.all.accept_redirect = 0" >> /etc/sysctl.conf;
# Option not tested, may improve protection
#echo "net.ipv4.src_valid_mark = 1" >> /etc/sysctl.conf;
echo "net.ipv6.echo_ignore_multicast = 1" >> /etc/sysctl.conf;
echo "net.ipv6.echo_ignore_anycast = 1" >> /etc/sysctl.conf;
# RFC 1337 May cause problems
echo "net.ipv4.tcp_rfc1337 = 1" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_helper = 0" >> /etc/syctl.conf;
echo "net.ipv4.ip_local_port_range=1024 65535" >> /etc/sysctl.conf
echo "net.netfilter.nf_conntrack_tcp_timeout_time_wait = 5" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_tcp_loose = 0" >> /etc/sysctl.conf;
echo "net.netfilter.nf_conntrack_max = 10000000" >> /etc/sysctl.conf;

# Little performance boost, but usually not needed
# echo "net.ipv4.route.max_size = 8048576" >> /etc/sysctl.conf;
# echo "net.ipv4.tcp_max_syn_backlog = 16384" >> /etc/sysctl.conf;


# Save all rules and tweaks

iptables-save;
ip6tables-save;
sysctl -p;
clear;
# Remove clear commands if u want to see stdout

echo "[+] Script changes applied
[+] Now you have better protection against DDoS" | lolcat

# ToDo:
# Add to text above some info from README.md
# For example: info about which attacks are blocked

# Want to delete rule? Replace -A (or -I) to -D and apply!

# If you want do delete ALL iptables rules,
# type iptables -F; ip6tables -F
# And do not forget to save your changes:
# iptables-save; ip6tables-save

# Made by yuki with love
